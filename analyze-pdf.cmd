@echo off
echo.
echo üìä MANUELLE PDF-INHALTSANALYSE
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.

REM √úberpr√ºfe ob PDF existiert
if not exist "Generalversammlung_output.pdf" (
    echo ‚ùå PDF nicht gefunden: Generalversammlung_output.pdf
    echo    F√ºhre zuerst die Konvertierung aus!
    pause
    exit /b 1
)

REM Zeige Dateiinformationen
for %%f in ("Generalversammlung_output.pdf") do (
    echo üìÑ Datei: %%~nxf
    echo üìè Gr√∂√üe: %%~zf Bytes
    echo üìÖ Erstellt: %%~tf
)

echo.
echo üîß F√ºhre PDF-Inhaltsanalyse aus...
echo.

REM F√ºhre Java-Analyzer aus (falls verf√ºgbar)
java -cp "target\docconverter-1.0.0.jar" ch.std.doc.converter.app.PdfAnalyzer 2>nul

if errorlevel 1 (
    echo ‚ö†Ô∏è  Java-Analyzer nicht verf√ºgbar
    echo    Verwende PowerShell-Alternative...
    echo.
    
    REM PowerShell Alternative f√ºr grundlegende Analyse
    powershell -Command ^
        "$file = Get-Item 'Generalversammlung_output.pdf'; ^
         Write-Host 'üìä BASIC FILE ANALYSIS' -ForegroundColor Green; ^
         Write-Host ('Size: {0} KB' -f [math]::Round($file.Length/1024, 2)); ^
         Write-Host ('Created: {0}' -f $file.CreationTime); ^
         Write-Host ('Modified: {0}' -f $file.LastWriteTime); ^
         if ($file.Length -gt 1000) { ^
             Write-Host '‚úÖ PDF seems substantial' -ForegroundColor Green ^
         } else { ^
             Write-Host '‚ö†Ô∏è  PDF seems quite small' -ForegroundColor Yellow ^
         }"
)

echo.
echo üìÅ PDF-Datei: %CD%\Generalversammlung_output.pdf
echo.
echo ‚úÖ Analyse abgeschlossen!
echo    Du kannst die PDF-Datei jetzt mit einem PDF-Viewer √∂ffnen.
echo.
pause
